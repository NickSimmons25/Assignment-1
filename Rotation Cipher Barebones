#include <stdio.h>
#include <string.h>

char rotationCipher(int letter, int rotationAmount);
char decryptRotation(int letter, int rotationAmount);

int main(void) {
  char x[] = "ZABCDEFGHIJKLMNOPQRSTUVWXY";
  int i = 0;
  printf("%s \n", x);
  int rotate = 1;
  for(i = 0; i < strlen(x); i++)
  {
    x[i] = decryptRotation(x[i], rotate);
  }
  printf("%s \n", x);
  return 0;
}

char rotationCipher(int letter, int rotationAmount) //takes a single letter in a string, converts it to a number between 1 and 26 and then subtracts an amount equal to a user-specified quantity from this number.
{
  if(letter != 32) //doesnt convert spacebars (these have an ASCII code of 32).
  {
      letter = letter - 64; //converts an incoming letter to a number between 1 and 26. Assumes all incoming letters are capital. 
    if(letter > rotationAmount)
        letter = letter - rotationAmount; //if subtracting the rotation amount from the letter's number value will not produce a negative number, then this decision is executed. 
    else if(letter <= rotationAmount) //if subtracting the rotation amount from the letter's number value will produce a negative number, then this decision is executed. 
      letter = (26 - (rotationAmount - letter)); //the produced negative number is added to 26. This means that letters near the start of the alphabet will be converted to numbers near the end of the alphabet. 
    letter = letter + 64; //converts the letter back into its correct ASCII code.
  }
  return letter; //returns the new rotation cipher encrypted letter so that it may be assigned to the inputted string. 
}


char decryptRotation(int letter, int rotationAmount) //takes a single letter from a string encrytped using the rotation cipher, converts it to a number between 1 and 26 (representing the letters in the alphabet) and decrypts it using its key. 
{
  if(letter != 32) //stops space bars from being changed (space bars have an ASCII code of 32).
  {
    letter = letter - 64; //converts letter to a number between 1 and 26. 
    if(letter <= (26 - rotationAmount)) //if the letter's value is smaller than the total number of letters in the alphabet - the key, add the value of the key to the letter.  
      letter = letter + rotationAmount;
    else if(letter >= (26 - rotationAmount)) //if the letter's value is larger or equal to the total number of letters in the alphabet - the key, subtract (number of letters - key) from the value for letter. 
      letter = (letter - (26 - rotationAmount));
    letter = letter + 64; //converts the letter from a number between 1 and 26 back to its original ASCII code. 
  }
  return letter; //returns the decrypted letter. 
}


